// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Authorization
{
    /// <summary> The AccessReviewDefaultSettings service client. </summary>
    public partial class AccessReviewDefaultSettingsClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _subscriptionId;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AccessReviewDefaultSettingsClient for mocking. </summary>
        protected AccessReviewDefaultSettingsClient()
        {
        }

        /// <summary> Initializes a new instance of AccessReviewDefaultSettingsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public AccessReviewDefaultSettingsClient(string subscriptionId, AzureKeyCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new AuthorizationManagementClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AccessReviewDefaultSettingsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public AccessReviewDefaultSettingsClient(string subscriptionId, AzureKeyCredential credential, Uri endpoint, AuthorizationManagementClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AuthorizationManagementClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get access review default settings for the subscription. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   type: string,
        ///   properties: {
        ///     mailNotificationsEnabled: boolean,
        ///     reminderNotificationsEnabled: boolean,
        ///     defaultDecisionEnabled: boolean,
        ///     justificationRequiredOnApproval: boolean,
        ///     defaultDecision: &quot;Approve&quot; | &quot;Deny&quot; | &quot;Recommendation&quot;,
        ///     autoApplyDecisionsEnabled: boolean,
        ///     recommendationsEnabled: boolean,
        ///     recommendationLookBackDuration: AccessReviewScheduleSettingsRecommendationLookBackDuration,
        ///     instanceDurationInDays: number,
        ///     recurrence: {
        ///       pattern: {
        ///         type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///         interval: number
        ///       },
        ///       range: {
        ///         type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///         numberOfOccurrences: number,
        ///         startDate: string (ISO 8601 Format),
        ///         endDate: string (ISO 8601 Format)
        ///       }
        ///     }
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     message: string,
        ///     code: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAccessReviewDefaultSettingAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("AccessReviewDefaultSettingsClient.GetAccessReviewDefaultSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccessReviewDefaultSettingRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get access review default settings for the subscription. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   type: string,
        ///   properties: {
        ///     mailNotificationsEnabled: boolean,
        ///     reminderNotificationsEnabled: boolean,
        ///     defaultDecisionEnabled: boolean,
        ///     justificationRequiredOnApproval: boolean,
        ///     defaultDecision: &quot;Approve&quot; | &quot;Deny&quot; | &quot;Recommendation&quot;,
        ///     autoApplyDecisionsEnabled: boolean,
        ///     recommendationsEnabled: boolean,
        ///     recommendationLookBackDuration: AccessReviewScheduleSettingsRecommendationLookBackDuration,
        ///     instanceDurationInDays: number,
        ///     recurrence: {
        ///       pattern: {
        ///         type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///         interval: number
        ///       },
        ///       range: {
        ///         type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///         numberOfOccurrences: number,
        ///         startDate: string (ISO 8601 Format),
        ///         endDate: string (ISO 8601 Format)
        ///       }
        ///     }
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     message: string,
        ///     code: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAccessReviewDefaultSetting(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("AccessReviewDefaultSettingsClient.GetAccessReviewDefaultSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccessReviewDefaultSettingRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get access review default settings for the subscription. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   mailNotificationsEnabled: boolean,
        ///   reminderNotificationsEnabled: boolean,
        ///   defaultDecisionEnabled: boolean,
        ///   justificationRequiredOnApproval: boolean,
        ///   defaultDecision: &quot;Approve&quot; | &quot;Deny&quot; | &quot;Recommendation&quot;,
        ///   autoApplyDecisionsEnabled: boolean,
        ///   recommendationsEnabled: boolean,
        ///   recommendationLookBackDuration: AccessReviewScheduleSettingsRecommendationLookBackDuration,
        ///   instanceDurationInDays: number,
        ///   recurrence: {
        ///     pattern: {
        ///       type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///       interval: number
        ///     },
        ///     range: {
        ///       type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///       numberOfOccurrences: number,
        ///       startDate: string (ISO 8601 Format),
        ///       endDate: string (ISO 8601 Format)
        ///     }
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   type: string,
        ///   properties: {
        ///     mailNotificationsEnabled: boolean,
        ///     reminderNotificationsEnabled: boolean,
        ///     defaultDecisionEnabled: boolean,
        ///     justificationRequiredOnApproval: boolean,
        ///     defaultDecision: &quot;Approve&quot; | &quot;Deny&quot; | &quot;Recommendation&quot;,
        ///     autoApplyDecisionsEnabled: boolean,
        ///     recommendationsEnabled: boolean,
        ///     recommendationLookBackDuration: AccessReviewScheduleSettingsRecommendationLookBackDuration,
        ///     instanceDurationInDays: number,
        ///     recurrence: {
        ///       pattern: {
        ///         type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///         interval: number
        ///       },
        ///       range: {
        ///         type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///         numberOfOccurrences: number,
        ///         startDate: string (ISO 8601 Format),
        ///         endDate: string (ISO 8601 Format)
        ///       }
        ///     }
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     message: string,
        ///     code: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AccessReviewDefaultSettingsClient.Put");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get access review default settings for the subscription. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   mailNotificationsEnabled: boolean,
        ///   reminderNotificationsEnabled: boolean,
        ///   defaultDecisionEnabled: boolean,
        ///   justificationRequiredOnApproval: boolean,
        ///   defaultDecision: &quot;Approve&quot; | &quot;Deny&quot; | &quot;Recommendation&quot;,
        ///   autoApplyDecisionsEnabled: boolean,
        ///   recommendationsEnabled: boolean,
        ///   recommendationLookBackDuration: AccessReviewScheduleSettingsRecommendationLookBackDuration,
        ///   instanceDurationInDays: number,
        ///   recurrence: {
        ///     pattern: {
        ///       type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///       interval: number
        ///     },
        ///     range: {
        ///       type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///       numberOfOccurrences: number,
        ///       startDate: string (ISO 8601 Format),
        ///       endDate: string (ISO 8601 Format)
        ///     }
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   type: string,
        ///   properties: {
        ///     mailNotificationsEnabled: boolean,
        ///     reminderNotificationsEnabled: boolean,
        ///     defaultDecisionEnabled: boolean,
        ///     justificationRequiredOnApproval: boolean,
        ///     defaultDecision: &quot;Approve&quot; | &quot;Deny&quot; | &quot;Recommendation&quot;,
        ///     autoApplyDecisionsEnabled: boolean,
        ///     recommendationsEnabled: boolean,
        ///     recommendationLookBackDuration: AccessReviewScheduleSettingsRecommendationLookBackDuration,
        ///     instanceDurationInDays: number,
        ///     recurrence: {
        ///       pattern: {
        ///         type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///         interval: number
        ///       },
        ///       range: {
        ///         type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///         numberOfOccurrences: number,
        ///         startDate: string (ISO 8601 Format),
        ///         endDate: string (ISO 8601 Format)
        ///       }
        ///     }
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     message: string,
        ///     code: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Put(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AccessReviewDefaultSettingsClient.Put");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetAccessReviewDefaultSettingRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewScheduleSettings/default", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePutRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewScheduleSettings/default", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
