// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Authorization
{
    /// <summary> The AccessReviewHistoryDefinitions service client. </summary>
    public partial class AccessReviewHistoryDefinitionsClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _subscriptionId;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AccessReviewHistoryDefinitionsClient for mocking. </summary>
        protected AccessReviewHistoryDefinitionsClient()
        {
        }

        /// <summary> Initializes a new instance of AccessReviewHistoryDefinitionsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public AccessReviewHistoryDefinitionsClient(string subscriptionId, AzureKeyCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new AuthorizationManagementClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AccessReviewHistoryDefinitionsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public AccessReviewHistoryDefinitionsClient(string subscriptionId, AzureKeyCredential credential, Uri endpoint, AuthorizationManagementClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AuthorizationManagementClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get access review history definition by definition Id. </summary>
        /// <param name="historyDefinitionId"> The id of the access review history definition. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="historyDefinitionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="historyDefinitionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   type: string,
        ///   properties: {
        ///     displayName: string,
        ///     reviewHistoryPeriodStartDateTime: string (ISO 8601 Format),
        ///     reviewHistoryPeriodEndDateTime: string (ISO 8601 Format),
        ///     decisions: [&quot;Approve&quot; | &quot;Deny&quot; | &quot;NotReviewed&quot; | &quot;DontKnow&quot; | &quot;NotNotified&quot;],
        ///     status: &quot;Requested&quot; | &quot;InProgress&quot; | &quot;Done&quot; | &quot;Error&quot;,
        ///     createdDateTime: string (ISO 8601 Format),
        ///     createdBy: {
        ///       principalId: string,
        ///       principalType: &quot;user&quot; | &quot;servicePrincipal&quot;,
        ///       principalName: string,
        ///       userPrincipalName: string
        ///     },
        ///     scopes: [
        ///       {
        ///         resourceId: string,
        ///         roleDefinitionId: string,
        ///         principalType: &quot;user&quot; | &quot;guestUser&quot; | &quot;servicePrincipal&quot; | &quot;user,group&quot; | &quot;redeemedGuestUser&quot;,
        ///         assignmentState: &quot;eligible&quot; | &quot;active&quot;,
        ///         inactiveDuration: AccessReviewScopeInactiveDuration,
        ///         expandNestedMemberships: boolean
        ///       }
        ///     ],
        ///     settings: {
        ///       pattern: {
        ///         type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///         interval: number
        ///       },
        ///       range: {
        ///         type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///         numberOfOccurrences: number,
        ///         startDate: string (ISO 8601 Format),
        ///         endDate: string (ISO 8601 Format)
        ///       }
        ///     },
        ///     instances: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         type: string,
        ///         properties: {
        ///           reviewHistoryPeriodStartDateTime: string (ISO 8601 Format),
        ///           reviewHistoryPeriodEndDateTime: string (ISO 8601 Format),
        ///           displayName: string,
        ///           status: &quot;Requested&quot; | &quot;InProgress&quot; | &quot;Done&quot; | &quot;Error&quot;,
        ///           runDateTime: string (ISO 8601 Format),
        ///           fulfilledDateTime: string (ISO 8601 Format),
        ///           downloadUri: string,
        ///           expiration: string (ISO 8601 Format)
        ///         }
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     message: string,
        ///     code: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetByIdAsync(string historyDefinitionId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(historyDefinitionId, nameof(historyDefinitionId));

            using var scope = ClientDiagnostics.CreateScope("AccessReviewHistoryDefinitionsClient.GetById");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByIdRequest(historyDefinitionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get access review history definition by definition Id. </summary>
        /// <param name="historyDefinitionId"> The id of the access review history definition. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="historyDefinitionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="historyDefinitionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   type: string,
        ///   properties: {
        ///     displayName: string,
        ///     reviewHistoryPeriodStartDateTime: string (ISO 8601 Format),
        ///     reviewHistoryPeriodEndDateTime: string (ISO 8601 Format),
        ///     decisions: [&quot;Approve&quot; | &quot;Deny&quot; | &quot;NotReviewed&quot; | &quot;DontKnow&quot; | &quot;NotNotified&quot;],
        ///     status: &quot;Requested&quot; | &quot;InProgress&quot; | &quot;Done&quot; | &quot;Error&quot;,
        ///     createdDateTime: string (ISO 8601 Format),
        ///     createdBy: {
        ///       principalId: string,
        ///       principalType: &quot;user&quot; | &quot;servicePrincipal&quot;,
        ///       principalName: string,
        ///       userPrincipalName: string
        ///     },
        ///     scopes: [
        ///       {
        ///         resourceId: string,
        ///         roleDefinitionId: string,
        ///         principalType: &quot;user&quot; | &quot;guestUser&quot; | &quot;servicePrincipal&quot; | &quot;user,group&quot; | &quot;redeemedGuestUser&quot;,
        ///         assignmentState: &quot;eligible&quot; | &quot;active&quot;,
        ///         inactiveDuration: AccessReviewScopeInactiveDuration,
        ///         expandNestedMemberships: boolean
        ///       }
        ///     ],
        ///     settings: {
        ///       pattern: {
        ///         type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///         interval: number
        ///       },
        ///       range: {
        ///         type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///         numberOfOccurrences: number,
        ///         startDate: string (ISO 8601 Format),
        ///         endDate: string (ISO 8601 Format)
        ///       }
        ///     },
        ///     instances: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         type: string,
        ///         properties: {
        ///           reviewHistoryPeriodStartDateTime: string (ISO 8601 Format),
        ///           reviewHistoryPeriodEndDateTime: string (ISO 8601 Format),
        ///           displayName: string,
        ///           status: &quot;Requested&quot; | &quot;InProgress&quot; | &quot;Done&quot; | &quot;Error&quot;,
        ///           runDateTime: string (ISO 8601 Format),
        ///           fulfilledDateTime: string (ISO 8601 Format),
        ///           downloadUri: string,
        ///           expiration: string (ISO 8601 Format)
        ///         }
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     message: string,
        ///     code: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetById(string historyDefinitionId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(historyDefinitionId, nameof(historyDefinitionId));

            using var scope = ClientDiagnostics.CreateScope("AccessReviewHistoryDefinitionsClient.GetById");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetByIdRequest(historyDefinitionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the accessReviewHistoryDefinitions available from this provider, definition instances are only available for 30 days after creation. </summary>
        /// <param name="filter"> The filter to apply on the operation. Only standard filters on definition name and created date are supported. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       id: string,
        ///       name: string,
        ///       type: string,
        ///       properties: {
        ///         displayName: string,
        ///         reviewHistoryPeriodStartDateTime: string (ISO 8601 Format),
        ///         reviewHistoryPeriodEndDateTime: string (ISO 8601 Format),
        ///         decisions: [&quot;Approve&quot; | &quot;Deny&quot; | &quot;NotReviewed&quot; | &quot;DontKnow&quot; | &quot;NotNotified&quot;],
        ///         status: &quot;Requested&quot; | &quot;InProgress&quot; | &quot;Done&quot; | &quot;Error&quot;,
        ///         createdDateTime: string (ISO 8601 Format),
        ///         createdBy: {
        ///           principalId: string,
        ///           principalType: &quot;user&quot; | &quot;servicePrincipal&quot;,
        ///           principalName: string,
        ///           userPrincipalName: string
        ///         },
        ///         scopes: [
        ///           {
        ///             resourceId: string,
        ///             roleDefinitionId: string,
        ///             principalType: &quot;user&quot; | &quot;guestUser&quot; | &quot;servicePrincipal&quot; | &quot;user,group&quot; | &quot;redeemedGuestUser&quot;,
        ///             assignmentState: &quot;eligible&quot; | &quot;active&quot;,
        ///             inactiveDuration: AccessReviewScopeInactiveDuration,
        ///             expandNestedMemberships: boolean
        ///           }
        ///         ],
        ///         settings: {
        ///           pattern: {
        ///             type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///             interval: number
        ///           },
        ///           range: {
        ///             type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///             numberOfOccurrences: number,
        ///             startDate: string (ISO 8601 Format),
        ///             endDate: string (ISO 8601 Format)
        ///           }
        ///         },
        ///         instances: [
        ///           {
        ///             id: string,
        ///             name: string,
        ///             type: string,
        ///             properties: {
        ///               reviewHistoryPeriodStartDateTime: string (ISO 8601 Format),
        ///               reviewHistoryPeriodEndDateTime: string (ISO 8601 Format),
        ///               displayName: string,
        ///               status: &quot;Requested&quot; | &quot;InProgress&quot; | &quot;Done&quot; | &quot;Error&quot;,
        ///               runDateTime: string (ISO 8601 Format),
        ///               fulfilledDateTime: string (ISO 8601 Format),
        ///               downloadUri: string,
        ///               expiration: string (ISO 8601 Format)
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     message: string,
        ///     code: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetAccessReviewHistoryDefinitionsAsync(string filter = null, RequestContext context = null)
        {
            return GetAccessReviewHistoryDefinitionsImplementationAsync("AccessReviewHistoryDefinitionsClient.GetAccessReviewHistoryDefinitions", filter, context);
        }

        private AsyncPageable<BinaryData> GetAccessReviewHistoryDefinitionsImplementationAsync(string diagnosticsScopeName, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAccessReviewHistoryDefinitionsRequest(filter, context)
                        : CreateGetAccessReviewHistoryDefinitionsNextPageRequest(nextLink, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the accessReviewHistoryDefinitions available from this provider, definition instances are only available for 30 days after creation. </summary>
        /// <param name="filter"> The filter to apply on the operation. Only standard filters on definition name and created date are supported. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       id: string,
        ///       name: string,
        ///       type: string,
        ///       properties: {
        ///         displayName: string,
        ///         reviewHistoryPeriodStartDateTime: string (ISO 8601 Format),
        ///         reviewHistoryPeriodEndDateTime: string (ISO 8601 Format),
        ///         decisions: [&quot;Approve&quot; | &quot;Deny&quot; | &quot;NotReviewed&quot; | &quot;DontKnow&quot; | &quot;NotNotified&quot;],
        ///         status: &quot;Requested&quot; | &quot;InProgress&quot; | &quot;Done&quot; | &quot;Error&quot;,
        ///         createdDateTime: string (ISO 8601 Format),
        ///         createdBy: {
        ///           principalId: string,
        ///           principalType: &quot;user&quot; | &quot;servicePrincipal&quot;,
        ///           principalName: string,
        ///           userPrincipalName: string
        ///         },
        ///         scopes: [
        ///           {
        ///             resourceId: string,
        ///             roleDefinitionId: string,
        ///             principalType: &quot;user&quot; | &quot;guestUser&quot; | &quot;servicePrincipal&quot; | &quot;user,group&quot; | &quot;redeemedGuestUser&quot;,
        ///             assignmentState: &quot;eligible&quot; | &quot;active&quot;,
        ///             inactiveDuration: AccessReviewScopeInactiveDuration,
        ///             expandNestedMemberships: boolean
        ///           }
        ///         ],
        ///         settings: {
        ///           pattern: {
        ///             type: &quot;weekly&quot; | &quot;absoluteMonthly&quot;,
        ///             interval: number
        ///           },
        ///           range: {
        ///             type: &quot;endDate&quot; | &quot;noEnd&quot; | &quot;numbered&quot;,
        ///             numberOfOccurrences: number,
        ///             startDate: string (ISO 8601 Format),
        ///             endDate: string (ISO 8601 Format)
        ///           }
        ///         },
        ///         instances: [
        ///           {
        ///             id: string,
        ///             name: string,
        ///             type: string,
        ///             properties: {
        ///               reviewHistoryPeriodStartDateTime: string (ISO 8601 Format),
        ///               reviewHistoryPeriodEndDateTime: string (ISO 8601 Format),
        ///               displayName: string,
        ///               status: &quot;Requested&quot; | &quot;InProgress&quot; | &quot;Done&quot; | &quot;Error&quot;,
        ///               runDateTime: string (ISO 8601 Format),
        ///               fulfilledDateTime: string (ISO 8601 Format),
        ///               downloadUri: string,
        ///               expiration: string (ISO 8601 Format)
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     message: string,
        ///     code: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetAccessReviewHistoryDefinitions(string filter = null, RequestContext context = null)
        {
            return GetAccessReviewHistoryDefinitionsImplementation("AccessReviewHistoryDefinitionsClient.GetAccessReviewHistoryDefinitions", filter, context);
        }

        private Pageable<BinaryData> GetAccessReviewHistoryDefinitionsImplementation(string diagnosticsScopeName, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAccessReviewHistoryDefinitionsRequest(filter, context)
                        : CreateGetAccessReviewHistoryDefinitionsNextPageRequest(nextLink, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetAccessReviewHistoryDefinitionsRequest(string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewHistoryDefinitions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, false);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetByIdRequest(string historyDefinitionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewHistoryDefinitions/", false);
            uri.AppendPath(historyDefinitionId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAccessReviewHistoryDefinitionsNextPageRequest(string nextLink, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
